AWSTemplateFormatVersion: '2010-09-09'
Description: 'Portfolio Insight Site - Combined template that creates Lambda, IAM, DynamoDB, API Gateway, and S3 resources using free tier'

Parameters:
  ProjectName:
    Type: String
    Default: portfolio-insight
    Description: Name for the project resources
  
  S3BucketName:
    Type: String
    Description: S3 bucket name for future assets and reference

Resources:
  # ============== S3 Resources ==============
  WebsiteBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref S3BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Join ['', ['arn:aws:s3:::', !Ref WebsiteBucket, '/*']]
            Principal: '*'

  # ============== DynamoDB Resources ==============
  PortfolioTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-data'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      Tags:
        - Key: Project
          Value: !Ref ProjectName
          
  ProjectViewsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-project-views'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: project_id
          AttributeType: S
      KeySchema:
        - AttributeName: project_id
          KeyType: HASH
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # ============== Lambda Resources ==============
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: 
                  - !GetAtt PortfolioTable.Arn
                  - !GetAtt ProjectViewsTable.Arn

  PortfolioFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-function'
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.11
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          PROJECT_VIEWS_TABLE_NAME: !Ref ProjectViewsTable
      Layers:
        - 'arn:aws:lambda:us-west-2:770693421928:layer:Klayers-p311-boto3:25'
      Code:
        ZipFile: |
          import json
          import os
          import logging
          import boto3
          from botocore.exceptions import ClientError
          from decimal import Decimal

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          dynamodb = boto3.resource('dynamodb')
          table_name = os.environ.get('PROJECT_VIEWS_TABLE_NAME', 'portfolio-insight-project-views')
          project_views_table = dynamodb.Table(table_name)

          def decimal_to_float(obj):
              if isinstance(obj, Decimal):
                  return float(obj)
              raise TypeError

          def lambda_handler(event, context):
              """
              Main handler for Lambda function
              """
              logger.info(f"Event: {json.dumps(event)}")
              
              http_method = event.get('httpMethod', '')
              path = event.get('path', '')
              path_parameters = event.get('pathParameters', {})
              query_parameters = event.get('queryStringParameters', {}) or {}
              
              headers = {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type',
                  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS'
              }
              
              if http_method == 'OPTIONS':
                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': ''
                  }
              
              try:
                  if '/projects/views' in path and http_method == 'GET':
                      return get_all_project_views(headers)
                  
                  elif '/projects/view' in path and http_method == 'POST':
                      return increment_project_view(event, headers)
                  
                  else:
                      return {
                          'statusCode': 404,
                          'headers': headers,
                          'body': json.dumps({'error': 'Not Found'})
                      }
                      
              except Exception as e:
                  logger.error(f"Error processing request: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({'error': str(e)})
                  }

          def get_all_project_views(headers):
              """
              Get view counts for all projects
              """
              try:
                  response = project_views_table.scan()
                  items = response.get('Items', [])
                  
                  result = {
                      'projects': items
                  }
                  
                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps(result, default=decimal_to_float)
                  }
              
              except ClientError as e:
                  logger.error(f"DynamoDB error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({'error': f"Database error: {str(e)}"})
                  }

          def increment_project_view(event, headers):
              """
              Increment view count for a specific project
              """
              try:
                  body = json.loads(event.get('body', '{}'))
                  project_id = body.get('project_id')
                  project_title = body.get('project_title', '')
                  
                  if not project_id:
                      return {
                          'statusCode': 400,
                          'headers': headers,
                          'body': json.dumps({'error': 'project_id is required'})
                      }
                  
                  update_expression = "ADD view_count :inc"
                  expression_attribute_values = {':inc': 1}
                  
                  if project_title:
                      update_expression += " SET project_title = :title"
                      expression_attribute_values[':title'] = project_title
                      
                  response = project_views_table.update_item(
                      Key={'project_id': project_id},
                      UpdateExpression=update_expression,
                      ExpressionAttributeValues=expression_attribute_values,
                      ReturnValues='ALL_NEW'
                  )
                  
                  updated_item = response.get('Attributes', {})
                  
                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps({
                          'message': 'View count incremented',
                          'project': updated_item
                      }, default=decimal_to_float)
                  }
                  
              except ClientError as e:
                  logger.error(f"DynamoDB error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({'error': f"Database error: {str(e)}"})
                  }
              except json.JSONDecodeError:
                  return {
                      'statusCode': 400,
                      'headers': headers,
                      'body': json.dumps({'error': 'Invalid JSON in request body'})
                  }

      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # ============== API Gateway Resources ==============
  PortfolioAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-api'
      Description: API Gateway for Portfolio Insight Site
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  ProjectsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PortfolioAPI
      ParentId: !GetAtt PortfolioAPI.RootResourceId
      PathPart: 'projects'

  ProjectsViewsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PortfolioAPI
      ParentId: !Ref ProjectsResource
      PathPart: 'views'
  
  ProjectViewResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PortfolioAPI
      ParentId: !Ref ProjectsResource
      PathPart: 'view'

  GetProjectViewsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PortfolioAPI
      ResourceId: !Ref ProjectsViewsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PortfolioFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  PostProjectViewMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PortfolioAPI
      ResourceId: !Ref ProjectViewResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PortfolioFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  OptionsViewsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PortfolioAPI
      ResourceId: !Ref ProjectsViewsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: '{}'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  OptionsViewMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PortfolioAPI
      ResourceId: !Ref ProjectViewResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: '{}'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetProjectViewsMethod
      - PostProjectViewMethod
      - OptionsViewsMethod
      - OptionsViewMethod
    Properties:
      RestApiId: !Ref PortfolioAPI
      StageName: 'v1'

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PortfolioFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PortfolioAPI}/*/*'

Outputs:
  PortfolioTableName:
    Description: Name of the main DynamoDB table
    Value: !Ref PortfolioTable
    
  ProjectViewsTableName:
    Description: Name of the Project Views DynamoDB table
    Value: !Ref ProjectViewsTable

  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref PortfolioFunction
    
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt PortfolioFunction.Arn

  ApiEndpoint:
    Description: URL for the API Gateway endpoint
    Value: !Sub 'https://${PortfolioAPI}.execute-api.${AWS::Region}.amazonaws.com/v1/'
  
  GetProjectViewsEndpoint:
    Description: URL for getting all project views
    Value: !Sub 'https://${PortfolioAPI}.execute-api.${AWS::Region}.amazonaws.com/v1/projects/views'
    
  PostProjectViewEndpoint:
    Description: URL for incrementing a project view
    Value: !Sub 'https://${PortfolioAPI}.execute-api.${AWS::Region}.amazonaws.com/v1/projects/view'
    
  S3BucketName:
    Description: Name of the S3 bucket
    Value: !Ref WebsiteBucket